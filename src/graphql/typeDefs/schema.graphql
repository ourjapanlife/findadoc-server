type Name {
  nameId: ID
  lastName: String!
  firstName: String!
  middleName: String!
  language: LanguageEnum
}

type Specialty {
  specialtyId: ID
  speciality: String!
  language: LanguageEnum
}

type HealthcareProfessional {
  healthcareProfessionalId: ID
  names: [Name]
  languages: [LanguageEnum]
  degrees: [Degree]
  facilities: [Facility]
  specialties: [Specialty]
  insurance: [InsuranceEnum]
}

type Contact {
  contactId: ID
  email: String!
  phone: String!
  website: String!
  mapsLink: String!
}

type FacilityName {
  facilityNameId: ID
  name: String!
  language: LanguageEnum
}

type Facility {
  facilityId: ID
  name: FacilityName
  contact: Contact
  healthcareProfessionalStaff: [HealthcareProfessional]
}

enum LanguageEnum {
  English
  Japanese
  Russian
}

enum InsuranceEnum {
  nationalHealthInsurance
  internationalHealthInsurance
  noInsurance
  unknown
}

# The "Query" type is special: it lists all of the available queries that
# clients can execute, along with the return type for each. In this
# case, the "books" query returns an array of zero or more Books (defined above).
type Query {
  names: [Name]
  languages: [SpokenLanguage]
  specialities: [Specialty]
}

# {
#   "data": {
#     "name": {
#       "LastEn": "Toyoda"
#     },
#     "spokenLanguage": {

#     }
#   }
# }



{
  "person": {
    "names": [{
      "lastName": "Toyoda",
      "firstName": "LaShawn",
      "language": "English"
    }, {
      "lastName": "T",
      "firstName": "L",
      "language": "Japanese"
    }],
    "spokenLanguage": {

    }
  }
}
