type Contact {
  id: ID
  email: String
  phone: String
  website: String
  mapsLink: String
  address: PhysicalAddress
}

input ContactInput {
  email: String
  phone: String
  website: String
  mapsLink: String
  address: PhysicalAddressInput
}

type PhysicalAddress {
  id: ID
  postalCode: String
  prefectureEn: String
  cityEn: String
  addressLine1En: String
  addressLine2En: String
  prefectureJa: String
  cityJa: String
  addressLine1Ja: String
  addressLine2Ja: String
}

input PhysicalAddressInput {
  postalCode: String
  prefectureEn: String
  cityEn: String
  addressLine1En: String
  addressLine2En: String
  prefectureJa: String
  cityJa: String
  addressLine1Ja: String
  addressLine2Ja: String
}

type Facility {
  id: ID
  nameEn: String
  nameJa: String
  contact: Contact
  healthcareProfessionalIds: [String]
  healthcareProfessionals: [HealthcareProfessional]
}

input FacilityInput {
  nameEn: String
  nameJa: String
  contact: ContactInput
  healthcareProfessionals: [HealthcareProfessionalInput]!
}

input HealthcareProfessionalInput {
  names: [LocaleNameInput]
  degrees: [DegreeInput]
  spokenLanguages: [SpokenLanguageInput]
  specialties: [SpecialtyInput]
  acceptedInsurance: [Insurance]
}

type HealthcareProfessional {
  id: ID
  names: [LocaleName]
  degrees: [Degree]
  spokenLanguages: [SpokenLanguage]
  specialties: [Specialty]
  acceptedInsurance: [Insurance]
}

input LocaleNameInput {
  lastName: String
  firstName: String
  middleName: String
  locale: String
}

type LocaleName {
  lastName: String
  firstName: String
  middleName: String
  locale: String
}

input SpecialtyInput {
  names: [SpecialtyNameInput]
}

type Specialty {
  id: ID
  names: [SpecialtyName!]
}

input SpecialtyNameInput {
  name: String
  locale: String
}

type SpecialtyName {
  name: String
  locale: String
}

input SpokenLanguageInput {
  iso639_3: String
  nameJa: String
  nameEn: String
  nameNative: String
}

type SpokenLanguage {
  iso639_3: String
  nameJa: String
  nameEn: String
  nameNative: String
}

type Submission {
  id: ID!
  submittedLink: String!
  healthCareProfessionalName: String!
  spokenLanguages: [SpokenLanguage]!
  isUnderReview: Boolean!
  isApproved: Boolean!
  isRejected: Boolean!
}

input SubmissionInput {
  submittedLink: String!
  healthCareProfessionalName: String!
  spokenLanguages: [SpokenLanguageInput]!
}

input DegreeInput {
  id: ID
  nameJa: String
  nameEn: String
  abbreviation: String
}

type Degree {
  id: ID!
  nameJa: String
  nameEn: String
  abbreviation: String
}

enum Insurance {
  JAPANESE_HEALTH_INSURANCE
  INTERNATIONAL_HEALTH_INSURANCE
  INSURANCE_NOT_ACCEPTED
}

type Query {
  degrees: [Degree]
  degree(id: ID!): Degree
  physicalAddresses: [PhysicalAddress]
  physicalAddress(id: ID!): PhysicalAddress
  facilities: [Facility]
  facility(id: ID!): Facility
  healthcareProfessionals: [HealthcareProfessional]
  healthcareProfessional(id: ID!): HealthcareProfessional
  specialties: [Specialty]
  specialty(id: ID!): Specialty
  spokenLanguages: [SpokenLanguage]
  spokenLanguage(iso639_3: String!): SpokenLanguage
  submissions: [Submission]
  submission(id: ID!): Submission
}

type Mutation {
  createHealthcareProfessional(
    input: HealthcareProfessionalInput
  ): HealthcareProfessional
  updateHealthcareProfessional(
    id: ID!
    input: HealthcareProfessionalInput
  ): HealthcareProfessional
  createFacility(
    input: FacilityInput
  ): Facility
}
