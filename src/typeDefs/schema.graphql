# The base types are what is stored in the database, returned from queries, and after mutations are executed
# The input types are what is used to create and update the base types
type Facility {
  id: ID!
  nameEn: String!
  nameJa: String!
  contact: Contact!
  healthcareProfessionalIds: [ID!]!
  createdDate: String!
  updatedDate: String!
}

input CreateFacilityInput {
  nameEn: String!
  nameJa: String!
  contact: ContactInput!
  healthcareProfessionalIds: [ID!]
}

input UpdateFacilityInput {
  nameEn: String
  nameJa: String
  contact: ContactInput
  healthcareProfessionalIds: [Relationship!]
}

# You can search for facilities using any of combination these fields (AND operators)
input FacilitySearchFilters {
  nameEn: String
  nameJa: String
  contact: ContactInput
  healthcareProfessionalName: String
  createdDate: String
  updatedDate: String
  orderBy: [OrderBy!]
  limit: Int
  offset: Int
}

type HealthcareProfessional {
  id: ID!
  names: [LocalizedName!]!
  spokenLanguages: [Locale!]!
  degrees: [Degree!]!
  specialties: [Specialty!]!
  acceptedInsurance: [Insurance!]!
  facilityIds: [ID!]!
  createdDate: String!
  updatedDate: String!
}

input CreateHealthcareProfessionalInput {
  names: [LocalizedNameInput!]!
  spokenLanguages: [Locale!]
  degrees: [DegreeInput!]
  specialties: [SpecialtyInput!]
  acceptedInsurance: [Insurance!]
  facilityIds: [ID!]!
}

input UpdateHealthcareProfessionalInput {
  names: [LocalizedNameInput!]
  spokenLanguages: [Locale!]
  degrees: [DegreeInput!]
  specialties: [SpecialtyInput!]
  acceptedInsurance: [Insurance!]
  facilityIds: [Relationship!]
}

# You can search for healthcare professional using any of combination these fields (AND operators)
input HealthcareProfessionalSearchFilters {
  names: [LocalizedNameInput!]
  spokenLanguages: [Locale!]
  degrees: [DegreeInput!]
  specialties: [SpecialtyInput!]
  acceptedInsurance: [Insurance!]
  createdDate: String
  updatedDate: String
  orderBy: [OrderBy!]
  limit: Int
  offset: Int
}

type Submission {
  id: ID!
  googleMapsUrl: String!
  healthcareProfessionalName: String!
  spokenLanguages: [Locale!]!
  facility: FacilitySubmission
  healthcareProfessionals: [HealthcareProfessionalSubmission!]
  isUnderReview: Boolean!
  isApproved: Boolean!
  isRejected: Boolean!
  createdDate: String!
  updatedDate: String!
}

type FacilitySubmission {
  id: ID
  nameEn: String
  nameJa: String
  contact: Contact
  healthcareProfessionalIds: [ID!]!
}

type HealthcareProfessionalSubmission {
  id: ID
  names: [LocalizedName!]!
  spokenLanguages: [Locale!]!
  degrees: [Degree!]
  specialties: [Specialty!]
  acceptedInsurance: [Insurance!]
  facilityIds: [ID!]!
}

# For creating a submission. This has different fields than the Submission type
input CreateSubmissionInput {
  googleMapsUrl: String
  healthcareProfessionalName: String
  spokenLanguages: [Locale!]
}

# For updating a submission. This has different fields than the Submission type
input UpdateSubmissionInput {
  googleMapsUrl: String
  healthcareProfessionalName: String
  spokenLanguages: [Locale!]
  facility: CreateFacilityInput
  healthcareProfessionals: [CreateHealthcareProfessionalInput!]
  isUnderReview: Boolean
  isApproved: Boolean
  isRejected: Boolean
}

# You can search for submissions using any of combination these fields (AND operators)
input SubmissionSearchFilters {
  googleMapsUrl: String
  healthcareProfessionalName: String
  spokenLanguages: [Locale!]
  isUnderReview: Boolean
  isApproved: Boolean
  isRejected: Boolean
  createdDate: String
  updatedDate: String
  orderBy: [OrderBy!]
  limit: Int
  offset: Int
}

# This is used for id lists, but also has an action that lets the API understand if the id is being created, updated, or deleted
input Relationship {
  action: RelationshipAction!
  otherEntityId: ID!
}

enum RelationshipAction {
  CREATE
  UPDATE
  DELETE
}

enum Locale {
  ak_GH # Akan (Ghana)
  am_ET # Amharic (Ethiopia)
  ar_AE # Arabic (United Arab Emirates)
  bm_ML # Bambara (Mali)
  bn_BD # Bengali (Bangladesh)
  bs_BA # Bosnian (Bosnia and Herzegovina)
  ca_ES # Catalan (Spain)
  cs_CZ # Czech (Czech Republic)
  chr_US # Cherokee (United States)
  cy_GB # Welsh (United Kingdom)
  da_DK # Danish (Denmark)
  de_DE # German (Germany)
  ee_GH # Ewe (Ghana)
  el_GR # Greek (Greece)
  en_US # English (United States)
  es_ES # Spanish (Spain)
  et_EE # Estonian (Estonia)
  fa_AF # Persian (Afghanistan)
  fil_PH # Filipino (Philippines)
  fi_FI # Finnish (Finland)
  fr_FR # French (France)
  guz_KE # Gusii (Kenya)
  he_IL # Hebrew (Israel)
  hi_IN # Hindi (India)
  hr_HR # Croatian (Croatia)
  hu_HU # Hungarian (Hungary)
  hy_AM # Armenian (Armenia)
  id_ID # Indonesian (Indonesia)
  ig_NG # Igbo (Nigeria)
  is_IS # Icelandic (Iceland)
  it_IT # Italian (Italy)
  ja_JP # Japanese (Japan)
  kab_DZ # Kabyle (Algeria)
  km_KH # Khmer (Cambodia)
  kn_IN # Kannada (India)
  ko_KR # Korean (South Korea)
  lag_TZ # Langi (Tanzania)
  lg_UG # Ganda (Uganda)
  lv_LV # Latvian (Latvia)
  nb_NO # Norwegian Bokm√•l (Norway)
  ne_NP # Nepali (Nepal)
  nl_BE # Dutch (Belgium)
  pl_PL # Polish (Poland)
  pt_BR # Portuguese (Brazil)
  ru_RU # Russian (Russia)
  si_LK # Sinhala (Sri Lanka)
  sq_AL # Albanian (Albania)
  sr_Cyrl # Serbian (Cyrillic)
  sw_KE # Swahili (Kenya)
  th_TH # Thai (Thailand)
  tr_TR # Turkish (Turkey)
  vi_VN # Vietnamese (Vietnam)
  zh_CN # Chinese (Simplified, China)
  zh_HK # Chinese (Traditional, Hong Kong SAR China)
  zh_TW # Chinese (Traditional, Taiwan)
}

type LocalizedName {
  firstName: String!
  middleName: String
  lastName: String!
  locale: Locale! 
}
input LocalizedNameInput {
  firstName: String!
  middleName: String
  lastName: String!
  locale: Locale!
}

type Contact {
  googleMapsUrl: String!
  email: String!
  phone: String!
  website: String
  address: PhysicalAddress!
}
input ContactInput {
  googleMapsUrl: String!
  email: String!
  phone: String!
  website: String
  address: PhysicalAddressInput!
}

type PhysicalAddress {
  postalCode: String!
  prefectureEn: String!
  cityEn: String!
  addressLine1En: String!
  addressLine2En: String!
  prefectureJa: String!
  cityJa: String!
  addressLine1Ja: String!
  addressLine2Ja: String!
}
input PhysicalAddressInput {
  postalCode: String!
  prefectureEn: String!
  cityEn: String!
  addressLine1En: String!
  addressLine2En: String!
  prefectureJa: String!
  cityJa: String!
  addressLine1Ja: String!
  addressLine2Ja: String!
}

type Specialty {
  names: [SpecialtyName!]!
}
input SpecialtyInput {
  names: [SpecialtyNameInput!]!
}

type SpecialtyName {
  name: String!
  locale: Locale!
}
input SpecialtyNameInput {
  name: String!
  locale: Locale!
}

type Degree {
  nameJa: String!
  nameEn: String!
  abbreviation: String!
}
input DegreeInput {
  nameJa: String!
  nameEn: String!
  abbreviation: String!
}

enum Insurance {
  JAPANESE_HEALTH_INSURANCE
  INTERNATIONAL_HEALTH_INSURANCE
  INSURANCE_NOT_ACCEPTED
}

input OrderBy {
  orderDirection: OrderDirection!
  fieldToOrder: String!
}

enum OrderDirection {
  asc
  desc
}

type DeleteResult {
    isSuccessful: Boolean!
  }

# ======== Queries =========

type Query {
  facility(id: ID!): Facility
  facilities(filters: FacilitySearchFilters!): [Facility]
  healthcareProfessional(id: ID!): HealthcareProfessional
  healthcareProfessionals(filters: HealthcareProfessionalSearchFilters!): [HealthcareProfessional]
  submission(id: ID!): Submission
  submissions(filters: SubmissionSearchFilters!): [Submission]
}

#======== Mutations ========

type Mutation {
  createHealthcareProfessional(input: CreateHealthcareProfessionalInput!) : HealthcareProfessional

  updateHealthcareProfessional(
    id: ID!
    input: UpdateHealthcareProfessionalInput!
  ) : HealthcareProfessional

  deleteHealthcareProfessional(id: ID!) : DeleteResult

  createFacility(input: CreateFacilityInput!): Facility

  updateFacility(
    id: ID!
    input: UpdateFacilityInput!
  ): Facility

  deleteFacility(id: ID!) : DeleteResult

  createSubmission(input: CreateSubmissionInput!): Submission

  updateSubmission(
    id: ID!
    input: UpdateSubmissionInput!
  ): Submission

  deleteSubmission(id: ID!) : DeleteResult
}
