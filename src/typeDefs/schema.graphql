# The base types are what is stored in the database, returned from queries, and after mutations are executed
# The input types are what is used to create and update the base types

type Facility {
  id: ID!
  nameEn: String!
  nameJa: String!
  contact: Contact!
  mapLatitude: Float!
  mapLongitude: Float!
  healthcareProfessionalIds: [ID!]!
  createdDate: String!
  updatedDate: String!
}

input CreateFacilityInput {
  nameEn: String!
  nameJa: String!
  contact: ContactInput!
  mapLatitude: Float!
  mapLongitude: Float!
  healthcareProfessionalIds: [ID!]
}

input ModerationAutofillDatabaseSubmissionInput {
  id: String
  googleMapsUrl: String
}

input UpdateFacilityInput {
  nameEn: String
  nameJa: String
  contact: ContactInput
  mapLatitude: Float
  mapLongitude: Float
  healthcareProfessionalIds: [Relationship!]
}

# You can search for facilities using any of combination these fields (AND operators)
input FacilitySearchFilters {
  nameEn: String
  nameJa: String
  contact: ContactInput
  healthcareProfessionalName: String
  healthcareProfessionalIds: [String!]
  createdDate: String
  updatedDate: String
  orderBy: [OrderBy!]
  limit: Int
  offset: Int
}

type HealthcareProfessional {
  id: ID!
  names: [LocalizedName!]!
  spokenLanguages: [Locale!]!
  degrees: [Degree!]!
  specialties: [Specialty!]!
  acceptedInsurance: [Insurance!]!
  facilityIds: [ID!]!
  createdDate: String!
  updatedDate: String!
  additionalInfoForPatients: String
}

input CreateHealthcareProfessionalInput {
  names: [LocalizedNameInput!]!
  spokenLanguages: [Locale!]
  degrees: [Degree!]
  specialties: [Specialty!]
  acceptedInsurance: [Insurance!]
  facilityIds: [ID!]!
  additionalInfoForPatients: String
}

input UpdateHealthcareProfessionalInput {
  names: [LocalizedNameInput!]
  spokenLanguages: [Locale!]
  degrees: [Degree!]
  specialties: [Specialty!]
  acceptedInsurance: [Insurance!]
  facilityIds: [Relationship!]
  additionalInfoForPatients: String
}

# You can search for healthcare professional using any of combination these fields (AND operators)
input HealthcareProfessionalSearchFilters {
  names: [LocalizedNameInput!]
  spokenLanguages: [Locale!]
  degrees: [Degree!]
  specialties: [Specialty!]
  acceptedInsurance: [Insurance!]
  createdDate: String
  updatedDate: String
  orderBy: [OrderBy!]
  limit: Int
  offset: Int
}

type Submission {
  id: ID!
  autofillPlaceFromSubmissionUrl: Boolean
  googleMapsUrl: String!
  healthcareProfessionalName: String!
  spokenLanguages: [Locale!]!
  facility: FacilitySubmission
  healthcareProfessionals: [HealthcareProfessionalSubmission!]
  isUnderReview: Boolean!
  isApproved: Boolean!
  isRejected: Boolean!
  createdDate: String!
  updatedDate: String!
  notes: String
}

type FacilitySubmission {
  id: ID
  nameEn: String
  nameJa: String
  contact: Contact
  healthcareProfessionalIds: [ID!]!
  mapLatitude: Float
  mapLongitude: Float
}

type HealthcareProfessionalSubmission {
  id: ID
  names: [LocalizedName!]!
  spokenLanguages: [Locale!]!
  degrees: [Degree!]
  specialties: [Specialty!]
  acceptedInsurance: [Insurance!]
  additionalInfoForPatients: String
  facilityIds: [ID!]!
}

# For creating a submission. This has different fields than the Submission type
input CreateSubmissionInput {
  googleMapsUrl: String
  autofillPlaceFromSubmissionUrl: Boolean
  healthcareProfessionalName: String
  spokenLanguages: [Locale!]
  notes: String
}

# For updating a submission. This has different fields than the Submission type
input UpdateSubmissionInput {
  googleMapsUrl: String
  healthcareProfessionalName: String
  spokenLanguages: [Locale!]
  facility: CreateFacilityInput
  healthcareProfessionals: [CreateHealthcareProfessionalInput!]
  isUnderReview: Boolean
  isApproved: Boolean
  isRejected: Boolean
  autofillPlaceFromSubmissionUrl: Boolean
  notes: String
}

# You can search for submissions using any of combination these fields (AND operators)
input SubmissionSearchFilters {
  googleMapsUrl: String
  healthcareProfessionalName: String
  spokenLanguages: [Locale!]
  isUnderReview: Boolean
  isApproved: Boolean
  isRejected: Boolean
  createdDate: String
  updatedDate: String
  orderBy: [OrderBy!]
  limit: Int
  offset: Int
}

type Reservation {
  id: ID!
  userId: ID!
  createdDate: String!
  updatedDate: String!
  status: ReservationStatus!
}

enum ReservationStatus {
  BOOKED
  CANCELLED
  COMPLETED
}

enum DayOfTheWeek {
  SUN
  MON
  TUE
  WED
  THUR
  FRI
  SAT
}

type User {
  id: ID!
  createdDate: String!
  updatedDate: String! 
  displayName: String
  profilePicUrl: String
}

input CreateUserInput {
  displayName: String
  profilePicUrl: String
}

input UpdateUserInput {
  displayName: String
  profilePicUrl: String
}

type AuditLog {
  id: ID!
  actionType: ActionType!
  objectType: ObjectType!
  schemaVersion: SchemaVersion!
  newValue: String
  oldValue: String
  updatedBy: String!
  updatedDate: String!
}

# When we are storing the audit logs, we want to keep track of the actions used
enum ActionType {
  CREATE
  UPDATE
  DELETE
}

enum ObjectType {
  Facility
  HealthcareProfessional
  Submission
}

enum SchemaVersion {
  V1
}

# This is used for id lists, but also has an action that lets the API understand if the id is being created, updated, or deleted
input Relationship {
  action: RelationshipAction!
  otherEntityId: ID!
}

enum RelationshipAction {
  CREATE
  UPDATE
  DELETE
}

enum Locale {
  ak_GH # Akan (Ghana)
  am_ET # Amharic (Ethiopia)
  ar_AE # Arabic (United Arab Emirates)
  bm_ML # Bambara (Mali)
  bn_BD # Bengali (Bangladesh)
  bs_BA # Bosnian (Bosnia and Herzegovina)
  ca_ES # Catalan (Spain)
  cs_CZ # Czech (Czech Republic)
  chr_US # Cherokee (United States)
  cy_GB # Welsh (United Kingdom)
  da_DK # Danish (Denmark)
  de_DE # German (Germany)
  ee_GH # Ewe (Ghana)
  el_GR # Greek (Greece)
  en_US # English (United States)
  es_ES # Spanish (Spain)
  et_EE # Estonian (Estonia)
  fa_AF # Persian (Afghanistan)
  fi_FI # Finnish (Finland)
  fr_FR # French (France)
  guz_KE # Gusii (Kenya)
  he_IL # Hebrew (Israel)
  hi_IN # Hindi (India)
  hr_HR # Croatian (Croatia)
  hu_HU # Hungarian (Hungary)
  hy_AM # Armenian (Armenia)
  id_ID # Indonesian (Indonesia)
  ig_NG # Igbo (Nigeria)
  is_IS # Icelandic (Iceland)
  it_IT # Italian (Italy)
  ja_JP # Japanese (Japan)
  kab_DZ # Kabyle (Algeria)
  km_KH # Khmer (Cambodia)
  kn_IN # Kannada (India)
  ko_KR # Korean (South Korea)
  lag_TZ # Langi (Tanzania)
  lg_UG # Ganda (Uganda)
  lv_LV # Latvian (Latvia)
  mn_MN # Mongolian (Mongolia)
  nb_NO # Norwegian Bokm√•l (Norway)
  ne_NP # Nepali (Nepal)
  nl_BE # Dutch (Belgium)
  pl_PL # Polish (Poland)
  pt_BR # Portuguese (Brazil)
  ru_RU # Russian (Russia)
  si_LK # Sinhala (Sri Lanka)
  sq_AL # Albanian (Albania)
  sr_Cyrl # Serbian (Cyrillic)
  sw_KE # Swahili (Kenya)
  th_TH # Thai (Thailand)
  tl_PH # Tagalog (Philippines)
  tr_TR # Turkish (Turkey)
  vi_VN # Vietnamese (Vietnam)
  zh_CN # Chinese (Simplified, China)
  zh_HK # Chinese (Traditional, Hong Kong SAR China)
  zh_TW # Chinese (Traditional, Taiwan)
  und # Unspecified Language (Undefined)
}

type LocalizedName {
  firstName: String!
  middleName: String
  lastName: String!
  locale: Locale!
}
input LocalizedNameInput {
  firstName: String!
  middleName: String
  lastName: String!
  locale: Locale!
}

type Contact {
  googleMapsUrl: String!
  email: String
  phone: String!
  website: String
  address: PhysicalAddress!
}
input ContactInput {
  googleMapsUrl: String!
  email: String
  phone: String!
  website: String
  address: PhysicalAddressInput!
}

type PhysicalAddress {
  postalCode: String!
  prefectureEn: String!
  cityEn: String!
  addressLine1En: String!
  addressLine2En: String
  prefectureJa: String!
  cityJa: String!
  addressLine1Ja: String!
  addressLine2Ja: String
}
input PhysicalAddressInput {
  postalCode: String!
  prefectureEn: String!
  cityEn: String!
  addressLine1En: String!
  addressLine2En: String!
  prefectureJa: String!
  cityJa: String!
  addressLine1Ja: String!
  addressLine2Ja: String!
}

enum Specialty {
  ALLERGY_AND_IMMUNOLOGY
  ANESTHESIOLOGY
  CARDIOLOGY
  COSMETIC_SURGERY
  DENTISTRY
  DERMATOLOGY
  DIAGNOSTIC_RADIOLOGY
  EMERGENCY_MEDICINE
  ENT_SPECIALIST
  FAMILY_MEDICINE
  GENERAL_MEDICINE
  INFECTIOUS_DISEASES
  INTERNAL_MEDICINE
  MEDICAL_GENETICS
  NEUROLOGY
  NUCLEAR_MEDICINE
  OBSTETRICS_AND_GYNECOLOGY
  OPHTHALMOLOGY
  OPTOMETRY
  ORTHODONTICS
  ORTHOPEDIC_SURGERY
  PATHOLOGY
  PEDIATRICS
  PHARMACY
  PHYSIOTHERAPY
  PHYSICAL_MEDICINE_AND_REHABILITATION
  PLASTIC_SURGERY
  PREVENTIVE_MEDICINE
  PSYCHIATRY
  RADIATION_ONCOLOGY
  SPORTS_MEDICINE
  SURGERY
  TRAUMATOLOGY
  UROLOGY
}

# ======== Categories for specialties =========

enum SpecialtyCategory {
  CHILDRENS_HEALTH
  COSMETIC_AND_PLASTIC_SURGERY
  DENTAL
  DERMATOLOGY
  ENT
  EYE_AND_VISION
  MENTAL_HEALTH
  MENS_HEALTH
  PHYSICAL_THERAPY
  PRIMARY_CARE
  SPORTS_AND_REHAB
  WOMENS_HEALTH
}

enum Degree {
  CNM # Certified Nurse Midwife
  DC # Doctor of Chiropractic
  DDS # Doctor of Dental Surgery
  DMD # Doctor of Dental Medicine
  DNP # Doctor of Nursing Practice
  DO # Doctor of Osteopathic Medicine
  DPM # Doctor of Podiatric Medicine
  DPT # Doctor of Physical Therapy
  DSc # Doctor of Science
  DSW # Doctor of Social Work
  DVM # Doctor of Veterinary Medicine
  EdD # Doctor of Education
  MD # Medical Doctor
  MPH # Master of Public Health
  NP # Nurse Practitioner
  OD # Doctor of Optometry
  PA # Physician Assistant
  PhD # Doctor of Philosophy
  PharmD # Doctor of Pharmacy
  PsyD # Doctor of Psychology
}

enum Insurance {
  JAPANESE_HEALTH_INSURANCE
  INTERNATIONAL_HEALTH_INSURANCE
  TRAVEL_INSURANCE
  INSURANCE_NOT_ACCEPTED
  UNINSURED
}

input OrderBy {
  orderDirection: OrderDirection!
  fieldToOrder: String!
}

enum OrderDirection {
  asc
  desc
}

type DeleteResult {
  isSuccessful: Boolean!
}

# ======== Queries =========

type Query {
  facility(id: ID!): Facility
  facilities(filters: FacilitySearchFilters!): [Facility!]!
  facilitiesTotalCount(filters: FacilitySearchFilters!): Int!
  healthcareProfessional(id: ID!): HealthcareProfessional
  healthcareProfessionals(
    filters: HealthcareProfessionalSearchFilters!
  ): [HealthcareProfessional!]!
  healthcareProfessionalsTotalCount(
    filters: HealthcareProfessionalSearchFilters!
  ): Int!
  submission(id: ID!): Submission
  submissions(filters: SubmissionSearchFilters!): [Submission!]!
  submissionsTotalCount(filters: SubmissionSearchFilters!): Int!
  auditLog(id: ID): AuditLog
  user(id: ID!): User
}

#======== Mutations ========

type Mutation {
  createHealthcareProfessional(
    input: CreateHealthcareProfessionalInput!
  ): HealthcareProfessional!

  updateHealthcareProfessional(
    id: ID!
    input: UpdateHealthcareProfessionalInput!
  ): HealthcareProfessional!

  deleteHealthcareProfessional(id: ID!): DeleteResult!

  createFacility(input: CreateFacilityInput!): Facility!

  updateFacility(id: ID!, input: UpdateFacilityInput!): Facility!

  deleteFacility(id: ID!): DeleteResult!

  createSubmission(input: CreateSubmissionInput!): Submission!

  moderationPanelUpdateSubmission(
    input: ModerationAutofillDatabaseSubmissionInput!
  ): Submission!

  updateSubmission(id: ID!, input: UpdateSubmissionInput!): Submission!

  deleteSubmission(id: ID!): DeleteResult!

  createUser(input: CreateUserInput!): User!

  updateUser(input: UpdateUserInput!): User!
}
