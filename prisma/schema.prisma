// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DB_URL")
}

model PersonName {
  id                     Int                     @id @default(autoincrement())
  names                  LocaleName[]
  HealthcareProfessional HealthcareProfessional?

  createdAt DateTime  @default(now())
  updatedAt DateTime
  deletedAt DateTime?
}

model LocaleName {
  id         Int     @id @default(autoincrement())
  locale     String // ISO-639-1
  firstName  String
  middleName String?
  lastName   String

  PersonName   PersonName? @relation(fields: [personNameId], references: [id])
  personNameId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime
  // no soft deletes due to unique constraint

  // only allow one localeName per PersonName
  @@unique([locale, personNameId])
}

model SpokenLanguage {
  iso639_3 String @id
  nameJa   String
  nameEn   String

  healthcareProfessionals HealthcareProfessionalSpokenLanguage[]
}

model Specialty {
  id                              Int                               @id @default(autoincrement())
  nameJa                          String
  nameEn                          String
  HealthcareProfessional          HealthcareProfessional?           @relation(fields: [healthcareProfessionalId], references: [id])
  healthcareProfessionalId        Int?
  HealthcareProfessionalSpecialty HealthcareProfessionalSpecialty[]
}

model Degree {
  id                           Int                            @id @default(autoincrement())
  nameJa                       String
  nameEn                       String
  abbreviation                 String
  HealthcareProfessional       HealthcareProfessional?        @relation(fields: [healthcareProfessionalId], references: [id])
  healthcareProfessionalId     Int?
  HealthcareProfessionalDegree HealthcareProfessionalDegree[]
}

model HealthcareProfessional {
  id              Int                                    @id @default(autoincrement())
  name            PersonName                             @relation(fields: [personNameId], references: [id])
  degree          Degree[]
  specialties     Specialty[]
  spokenLanguages HealthcareProfessionalSpokenLanguage[]
  contact         Contact                                @relation(fields: [contactId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime
  deletedAt DateTime?
  published Boolean   @default(false)

  personNameId                    Int                               @unique
  contactId                       Int
  HealthcareProfessionalSpecialty HealthcareProfessionalSpecialty[]
  HealthcareProfessionalDegree    HealthcareProfessionalDegree[]
}

// Many to Many relation between HealthcareProfessional and Specialty
model HealthcareProfessionalSpecialty {
  HealthcareProfessional   HealthcareProfessional @relation(fields: [healthcareProfessionalId], references: [id])
  healthcareProfessionalId Int

  Specialty   Specialty @relation(fields: [specialtyId], references: [id])
  specialtyId Int

  @@id([healthcareProfessionalId, specialtyId])
}

// Many to Many relation between HealthcareProfessional and Degree
model HealthcareProfessionalDegree {
  HealthcareProfessional   HealthcareProfessional @relation(fields: [healthcareProfessionalId], references: [id])
  healthcareProfessionalId Int

  Degree   Degree @relation(fields: [degreeId], references: [id])
  degreeId Int

  @@id([healthcareProfessionalId, degreeId])
}

// Many to Many relation between HealthcareProfessional and SpokenLanguage
model HealthcareProfessionalSpokenLanguage {
  HealthcareProfessional   HealthcareProfessional @relation(fields: [healthcareProfessionalId], references: [id])
  healthcareProfessionalId Int

  SpokenLanguage         SpokenLanguage @relation(fields: [spokenLanguageIso639_3], references: [iso639_3])
  spokenLanguageIso639_3 String

  @@id([healthcareProfessionalId, spokenLanguageIso639_3])
}

model Contact {
  id       Int    @id @default(autoincrement())
  email    String
  phone    String
  website  String
  mapsLink String

  createdAt DateTime  @default(now())
  updatedAt DateTime
  deletedAt DateTime?

  Facility               Facility[]
  HealthcareProfessional HealthcareProfessional[]
}

model Facility {
  id     Int    @id @default(autoincrement())
  nameEn String
  nameJa String

  createdAt DateTime  @default(now())
  updatedAt DateTime
  deletedAt DateTime?
  published Boolean   @default(false)

  contact   Contact @relation(fields: [contactId], references: [id])
  contactId Int
}
